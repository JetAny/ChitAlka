// <auto-generated />
using System;
using DB_ChitAlka;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB_ChitAlka.Migrations
{
    [DbContext(typeof(dbchitalcaContext))]
    partial class dbchitalcaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("DB_ChitAlka.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("author", (string)null);
                });

            modelBuilder.Entity("DB_ChitAlka.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BookImage")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Genre")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("book", (string)null);
                });

            modelBuilder.Entity("DB_ChitAlka.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    //b.Property<int?>("BookId")
                    //    .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(20000)
                        .HasColumnType("longtext")
                        .HasColumnName("Text");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("section", (string)null);
                });

            modelBuilder.Entity("DB_ChitAlka.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NickName")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Password")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Role")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Userlibrary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "Password", "FirstName", "LastName", "NickName", "Role" }, "user_Id_IDX");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("DB_ChitAlka.Userlibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("userlibrary", (string)null);
                });

            modelBuilder.Entity("DB_ChitAlka.Book", b =>
                {
                    b.HasOne("DB_ChitAlka.Author", "Author")
                        .WithMany("Book")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DB_ChitAlka.Section", b =>
                {
                    b.HasOne("DB_ChitAlka.Book", null)
                        .WithMany("Section")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("DB_ChitAlka.Author", b =>
                {
                    b.Navigation("Book");
                });

            modelBuilder.Entity("DB_ChitAlka.Book", b =>
                {
                    b.Navigation("Section");
                });
#pragma warning restore 612, 618
        }
    }
}
